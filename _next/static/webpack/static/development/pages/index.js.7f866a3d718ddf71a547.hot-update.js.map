{"version":3,"file":"static/webpack/static/development/pages/index.js.7f866a3d718ddf71a547.hot-update.js","sources":["webpack:///./posts sync \\.md$","webpack:///./posts/quick-guide-to-using-interfaces-with-javascript.md"],"sourcesContent":["var map = {\n\t\"./9-ways-to-level-up-your-javascript-code.md\": \"./posts/9-ways-to-level-up-your-javascript-code.md\",\n\t\"./quick-guide-to-using-interfaces-with-javascript.md\": \"./posts/quick-guide-to-using-interfaces-with-javascript.md\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./posts sync recursive \\\\.md$\";","export default \"# Quick Guide to using interfaces with JavaScript\\n\\n_I wrote this article back in 2016 and a lot has changed since. Because of this shift I have decided to remove certain sections that are no longer considered best practises or are based on ES5 APIs. Enjoy :)_\\n\\nInterfaces are great for when you need to enforce some rules about how a developer builds a class. For example we have a Form class, this class is composed of lots of Fields/Inputs. Instead of writing logic to handle all different types of inputs we can define a common interface between them all.\\n\\nOur Interface will contain a `render()` method to render out the input and a `value()` method to get the input’s value.\\n\\n```javascript\\nconst required = () => {\\n  throw new Error(\\\"Implement!\\\");\\n};\\n\\nclass InputInterface {\\n  render = required;\\n  value = required;\\n}\\n```\\n\\nWe can apply the Interface to a Base Input class so that all of our derived classes have the Interface.\\n\\n```javascript\\nclass Input extends InputInterface {}\\n```\\n\\nNow whenever you call `render()` you will get an Implementation Error. This forces the developer to override the Base class’s methods. Thus you have forced them to implement the interface.\\n\\n```javascript\\nclass Checkbox extends Input {\\n  constructor () {\\n    this.$el = $(\\\"<input/>\\\", { type: \\\"checkbox\\\" }); \\n  }\\n  render () {\\n    return this.$el;\\n  }\\n  value () {\\n    return this.$el.prop(\\\"checked\\\");\\n  }\\n}\\n```\""],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AAAA;;;;A","sourceRoot":""}