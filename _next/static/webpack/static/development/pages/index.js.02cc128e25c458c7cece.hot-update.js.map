{"version":3,"file":"static/webpack/static/development/pages/index.js.02cc128e25c458c7cece.hot-update.js","sources":["webpack:///./posts sync \\.md$","webpack:///./posts/writing-reusable-javascript.md"],"sourcesContent":["var map = {\n\t\"./9-ways-to-level-up-your-javascript-code.md\": \"./posts/9-ways-to-level-up-your-javascript-code.md\",\n\t\"./quick-guide-to-using-interfaces-with-javascript.md\": \"./posts/quick-guide-to-using-interfaces-with-javascript.md\",\n\t\"./the-rules-of-reusable-components.md\": \"./posts/the-rules-of-reusable-components.md\",\n\t\"./utilise-render-props-to-separate-logic-from-presentation-in-react.md\": \"./posts/utilise-render-props-to-separate-logic-from-presentation-in-react.md\",\n\t\"./writing-reusable-javascript.md\": \"./posts/writing-reusable-javascript.md\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./posts sync recursive \\\\.md$\";","export default \"# Writing reusable JavaScript (Revised)\\n\\n> Don’t reinvent the wheel, just realign it. — Anthony J. D’Angelo\\n\\nNote from the author:\\n\\n_I wrote this article back in 2016 and a lot has changed since. Because of this shift I have decided to remove certain sections that are no longer considered best practises or are based on ES5 APIs. Enjoy :)_\\n\\n\\n## It is the small things that count\\n\\nSmall problems are usually overlooked by the developer, I myself have rushed and wrote sloppy functions as I had lack of care for the smaller problem.\\n\\nAn example of rushing:\\n\\n```javascript\\n$(\\\"button\\\").click(() => {\\n  const heading = $(\\\"h1\\\").text();\\n  const capital = heading[0].toUpperCase() + heading.slice(1);\\n  $(\\\"h1\\\").text(capital);\\n});\\n```\\n\\nHow can we improve this? Right away we can pull out the entire function so it is no longer an anonymous function which allows us to reuse this block of code:\\n\\n```javascript\\nconst capitalizeHeading = () => {\\n  const heading = $(\\\"h1\\\").text();\\n  const capital = heading[0].toUpperCase() + heading.slice(1);\\n  $(\\\"h1\\\").text(capital);\\n};\\n\\n$(\\\"button\\\").click(capitalizeHeading);\\n```\\n\\nLets make this even more useful and extract the capitalizing logic:\\n\\n```javascript\\nconst capitalize = (word = \\\"\\\") => word[0].toUpperCase() + word.slice(1);\\n\\nconst capitalizeHeading = () => {\\n  const heading = $(\\\"h1\\\").text();\\n  $(\\\"h1\\\").text(capitalize(heading));\\n};\\n\\n$(\\\"button\\\").click(capitalizeHeading);\\n```\\n\\nNow we can reuse the capitalizing logic across our program.\\n\\nDid you know that [jQuery constructs a new Object and queries the DOM every time you call `$(<selector>)`?](https://github.com/jquery/jquery/blob/master/src/core.js#L34). We should cache jQuery objects in order to speed up execution times:\\n\\n```javascript\\nconst capitalize = (word = \\\"\\\") => word[0].toUpperCase() + word.slice(1);\\n\\nconst capitalizeHeading = () => {\\n  const $h1 = $(\\\"h1\\\"); // cache h1 in a variable\\n  $h1.text(capitalize($h1.text())); // reuse without creating\\n};\\n\\n$(\\\"button\\\").click(capitalizeHeading);\\n```\\n\\n`capitalizeHeading()` is okay for this one use case but it would be much more useful if it accepted a parameter to indicate what elements to capitalize:\\n\\n```javascript\\nconst capitalize = (word = \\\"\\\") => word[0].toUpperCase() + word.slice(1);\\n\\nconst capitalizeElement = element => () =>\\n  element.text(capitalize(element.text()));\\n\\n$(\\\"button\\\").click(capitalizeElement($(\\\"h1\\\")));\\n```\\n\\nWe can also wrap the execution in another function in order to create a partial. This is a function which has its arguments preloaded before execution, in this case we have made the element parameter a `$(“h1”)`.\\n\\nTurning `capitalizeHeading` into `capitalizeElement(<element>)` allows us to reuse that function for any element we wish to capitalize:\\n\\n```javascript\\ncapitalizeElement($(\\\"h2\\\"));\\ncapitalizeElement($(\\\"div[data-title]\\\"));\\n```\\n\""],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;;;;A","sourceRoot":""}