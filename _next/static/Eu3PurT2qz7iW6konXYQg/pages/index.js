(window.webpackJsonp=window.webpackJsonp||[]).push([[22,11,12,13,14,15,16,17,18],{"3o6q":function(e,n,t){var o={"./1-day-projects-outy.md":"sEdr","./9-ways-to-level-up-your-javascript-code.md":"OFry","./quick-guide-to-using-interfaces-with-javascript.md":"O2xo","./rating-landing-pages-twizzle.md":"vY4i","./rating-landing-pages-walling.md":"LKAR","./the-rules-of-reusable-components.md":"taVa","./utilise-render-props-to-separate-logic-from-presentation-in-react.md":"w0P0","./writing-reusable-javascript.md":"u4nI"};function a(e){var n=s(e);return t(n)}function s(e){if(!t.o(o,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=s,e.exports=a,a.id="3o6q"},LKAR:function(e,n,t){"use strict";t.r(n),n.default='---\nauthor: Kameron Tanseli\ndate: \'2019-12-24T15:55:26.370Z\'\nhero_image: ../static/posts/walling-1.png\ntitle: \'Rating Landing Pages: Walling\'\n---\n\n[Walling](https://walling.app) is an app that helps you organise your ideas into boards. Kinda like Google Keep but a whole lot prettier.\n\nWhat drew me to their landing page in particular is their use of whitespace and clear copy to drive home what they\'re trying to achieve.\n\nTheir opening line, "A Better Way to Organize & Refine Ideas", let\'s the user know what the main purpose of this app is. Simply put they have made a better way to take and organise notes or designs.\n\nWhats also cool is that their subtitle goes through different use cases for the app: "Working on a project, researching a topic or writing an article?". This done to relate to the customers wants as most note taking app customers are using the tool in 1 of those 3 ways.\n\nLet\'s talk about CTAs, especially when you have 3 of them. It can be tempting to make each CTA of equal importance but this would spell confusion and add a lack of direction for the customer.\n\nInstead Walling has made the sign up form huge and prominent compared to the rest of the CTAs. Not looking to give up your email yet? Why not watch a video of how it works? Not interested in watching a video? Try a demo of our product! They covered each different type of interest level and kept it from being problematic by having each level reduce in size and colour.\n\n![Walling\'s Landing Page](../static/posts/walling-2.png)\n\nScrolling down reveals why we should use Walling. They have kept it rather brief in order to show off the true USP of the product which is it\'s User Interface, which you can see playing as a GIF in the right hand side.\n\nLet\'s go through each reason:\n\n1. "Brain dump with ease"\n   * Clear and simple. I know as a creative person myself that just vomiting information into a notes app is one of the most common use cases.\n   * They distinguish themselves from normal note apps by saying "Unlike linear documents, with Walling you can throw out your ideas into Bricks". This is a good example of pushing their USP to the customer.\n\n2. "See the big picture"\n   * Walling\'s USP is to have all your ideas present in one big screen like a real Pinboard. They push this across well: "Walling empowers you to step back and get a high level understanding".\n   * They\'re not done yet. Below this point you get links to examples of completed boards where you can see for yourself the "big picture".\n\n![Walling\'s Landing Page](../static/posts/walling-3.png)\n\nNow we\'re getting to the push for driving a sign up. Highly relevant quote from ProductHunt is situated above the form as a last ditch effort to entice customers to sign up.\n\nNotice how in the form they have again listed out every target customer in their byline: "whether you are a designer, a developer, a project manager, a writer or even a non-tech.". This is done to reach out and personalise their customer and reassure them that this product can be used in their role.\n\n![Walling\'s Landing Page](../static/posts/walling-4.png)\n\nLastly let\'s take a look at their FAQ section.\n\n1. "How can I use Walling in my workflow?"\n   * I\'m not sure this is needed that much and probably the actual question Walling might be asked is: "Do you offer an integration to my existing tools?".\n2. "What platforms does Walling support?"\n   * Walling should have added download buttons as their CTAs instead of chasing emails. Not only do they get an app on their user\'s device which would increase engagement but also customer\'s know whether or not they can use Walling.\n   * Having to scroll all the way down to get this information is very helpful and feel somewhat deceitful.\n3. "What are Walling\'s price plans?"\n   * "Walling gives you a 7 day free trial and then $4/mo for unlimited Bricks and Walls." - Wow this is amazing only $4/mo for this app ?!? If only they shouted about this more, having the sign up forms made it feel like the app wasn\'t ready yet, I bet for this price a lot of creatives would try this out.\n   * "Workspaces for teams with centralized billing for $6/mo per team member." - Wait what? So $4 for a single user? And then $6 for a team member? Why not $4 per team member? Don\'t just increase pricing because its a company, when we can see you can clearly afford $4 per user!\n\n## Score: 6.5/10 - Minimal, Beautiful, Case study rich but lacks transparency'},O2xo:function(e,n,t){"use strict";t.r(n),n.default='---\nauthor: Kameron Tanseli\ndate: \'2019-12-24T13:56:26.370Z\'\nhero_image: ../static/js-cover.png\ntitle: \'Quick Guide to using interfaces with JavaScript\'\n---\n\nI wrote this article back in 2016 and a lot has changed since. Because of this shift I have decided to remove certain sections that are no longer considered best practises or are based on ES5 APIs. Enjoy :)\n\nInterfaces are great for when you need to enforce some rules about how a developer builds a class. For example we have a Form class, this class is composed of lots of Fields/Inputs. Instead of writing logic to handle all different types of inputs we can define a common interface between them all.\n\nOur Interface will contain a `render()` method to render out the input and a `value()` method to get the input\u2019s value.\n\n```javascript\nconst required = () => {\n  throw new Error("Implement!");\n};\n\nclass InputInterface {\n  render = required;\n  value = required;\n}\n```\n\nWe can apply the Interface to a Base Input class so that all of our derived classes have the Interface.\n\n```javascript\nclass Input extends InputInterface {}\n```\n\nNow whenever you call `render()` you will get an Implementation Error. This forces the developer to override the Base class\u2019s methods. Thus you have forced them to implement the interface.\n\n```javascript\nclass Checkbox extends Input {\n  constructor () {\n    this.$el = $("<input/>", { type: "checkbox" }); \n  }\n  render () {\n    return this.$el;\n  }\n  value () {\n    return this.$el.prop("checked");\n  }\n}\n```'},OFry:function(e,n,t){"use strict";t.r(n),n.default='---\nauthor: Kameron Tanseli\ndate: \'2019-12-24T13:56:26.370Z\'\nhero_image: ../static/js-cover.png\ntitle: \'9 ways to level up your JavaScript code\'\n---\n\nI wrote this article back in 2016 and a lot has changed since. Because of this shift I have decided to remove certain sections that are no longer considered best practises or are based on ES5 APIs. Enjoy :)\n\n## 1. Don\u2019t use commas when declaring variables\n\nThe variables can now be easily moved around from line to line without having to worry about the commas.\n\n```javascript\nlet a = 2,\n  b = a + 2,\n  c = b - 3;\n\nlet a = 2;\nlet b = a + 2;\nlet c = b - 3;\n```\n\n## 2. Move code into separate modules\n\nBefore:\n\n```javascript\nclass Stock {\n  checkItemIsInStock(item) {\n    // logic\n  }\n}\n\nclass Basket {\n  constructor() {\n    this.stock = new Stock();\n    this.items = [];\n  }\n  addToBasket(item) {\n    if (this.stock.checkItemIsInStock(item)) {\n      this.items.push(item);\n    }\n  }\n}\n```\n\nAfter:\n\n```javascript\nimport Stock from "./stock";\nimport Basket from "./basket";\n\nconst shoppingCart = new Basket(new Stock());\n```\n\n## 3. Utilize the Module pattern\n\nThe closure created by the [Immediately Invoked Function Expression (IIFE)](https://ultimatecourses.com/blog/mastering-the-module-pattern) allows privacy. E.g: The `privateMethod()` is only accessible by the inner `Basket` class:\n\n```javascript\nconst Basket = (() => {\n  // encapsulate a private function\n  const privateMethod = () => true;\n\n  class Basket {\n    publicMethod() {\n      privateMethod(); // use private methods\n    }\n  }\n\n  return Basket;\n})();\n```\n\n## 4. Comment your code\n\n```javascript\n/**\n * Creates a Point to be used in D3\n * @class Point\n * @example\n * new Point(2, 3);\n */\nclass Point {\n  /**\n   * @constructor\n   * @param {number} x - The x value.\n   * @param {number} y - The y value.\n   * @returns {Point} new instance of Point\n   */\n  constructor(x, y) {\n    // ...\n  }\n}\n```\n\nThis allows developers to get a deeper understanding of what is happening in your code without having to figure it out from the code. If you use [JSDOC](http://usejsdoc.org/about-getting-started.html) the comments can be used to generate online documentation guides.\n\n## 5. Learn design patterns\n\n- [The Observer pattern](http://www.dofactory.com/javascript/observer-design-pattern) helps your modules communicate to each other through events thus providing loose coupling in your app.\n\n- [The Mediator pattern](http://www.dofactory.com/javascript/mediator-design-pattern) takes control over a group of objects by encapsulating how these objects interact. E.g: a basket that handles items.\n\n- [The Iterator pattern](http://www.dofactory.com/javascript/iterator-design-pattern) is the underlying pattern for ES2015 generators.\n\n- [The Facade pattern](http://www.dofactory.com/javascript/facade-design-pattern) provides an simple interface which encapsulates the end user from complex functionality. E.g: Email module with simple methods such as start, stop and pause;\n\nNot only are these solutions to commonly solved problems, they are a way of describing application structure to other developers fairly simply. E.g: _\u201cThe basket module is a mediator for all the store items, it communicates to the payment module via an observer\u201d_.\n\n## 6. Pass objects into functions with a large number of arguments\n\n```javascript\n// not so good\nfunction colorWidget(\n  element,\n  colorValue,\n  colorRange,\n  colorFormat,\n  opacity,\n  onChange\n) {}\n\ncolorWidget($("<div/>"), "#fff" /*...*/);\n\n// way better\nfunction colorWidget({\n  element = $("<div/>"),\n  colorValue = "#000",\n  colorRange = [0, 255],\n  colorFormat = "rgb",\n  opacity = 0.8,\n  onChange = () => {}\n}) {\n  // ...\n}\ncolorWidget({\n  element: $("<div/>")\n});\n```\n1. Simple to add new options\n2. The developer doesn\u2019t have to worry about the order of the arguments\n3. Simple to add default values\n\n## 7. Don\u2019t use type constructors unless specifically necessary\n\n```javascript\n// Before\nconst x1 = new Object();\nconst x2 = new String();\nconst x3 = new Number();\nconst x4 = new Boolean();\nconst x5 = new Array();\nconst x6 = new RegExp("()");\nconst x7 = new Function();\n\n// After\nconst x1 = {};           \nconst x2 = "";           \nconst x3 = 0;            \nconst x4 = false;        \nconst x5 = [];           \nconst x6 = /()/;         \nconst x7 = function(){};\n```\n\nThe creation through type constructors is significantly slower than primitives. Also because the end result of the constructor is an `Object` rather than a primitive value you get [nasty side effects](http://stackoverflow.com/questions/5750656/whats-the-point-of-new-stringx-in-javascript) like so:\n\n```javascript\nconst a = new String("x");\na === "x"  //false\na == "x" //true\n\nconst b = "dog";\nb.woof = true;\nb.woof; // undefined\n\nconst c = new String("dog");\nc.woof = true;\nc.woof; // true\n```\n\n## 8. Make sure your context is right\n\n```javascript\nclass Button {\n  constructor () {\n    this.count = 0;\n  }\n  click () {\n    this.count += 1;\n  }\n  init () {\n    $("button").click(this.click);\n  }\n}\n```\n\nFrom a glance this should work however when a user clicks the button we will get an error that count doesn\u2019t exist. This is because the click function is executed in the context of the `$("button")` element instead of the `Button` object. We can fix this by binding the context to the function:\n\n```javascript\nclass Button {\n  constructor () {\n    this.count = 0;\n  }\n  click () {\n    this.count += 1;\n  }\n  init () {\n    $("button").click(() => this.click());\n    // or using bind\n    $("button").click(this.click.bind(this));\n  }\n}\n```\n\n## 9. Apply\n\n> The `apply()` method calls a function with a given this `value` and `arguments` provided as an array (or [an array-like object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects)). \u2014 MDN\n\nSome useful instances of using apply:\n\n```javascript\n// emulating "super" in an constructor \nSomeConstructor.prototype.somemethod.apply(this, arguments);\n\n// passing an array of promises to jQuery.when\n$.when.apply($, [$.get(), $.get()]);\n\n// finding the max number in an array\nMath.max.apply(Math.max, [1,2,3,4,5]);\n```\n\n## Bonus Points\n\nContributed by: [Russley Shaw](https://medium.com/@russleyshaw)\n\n## 10. Use let and const over var\n\n`let` allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used.\n\nLets look at a few use cases where this is useful over `var` statements:\n\n```javascript\nvar elements = document.querySelectorAll(\'p\');\nfor (var i = 0; i < elements.length; i++) {                                 \n    // have to wrap in IIFE other i would be elements.length\n    (function(count){  \n       elements[count].addEventListener(\'click\', function(){\n           elements[count + 1].remove();\n       });\n     })(i);\n}\n\n// using let\nlet elements = document.querySelectorAll(\'p\');\nfor (let i = 0; i < elements.length; i++) {\n   elements[i].addEventListener(\'click\', function(){\n        elements[i + 1].remove();\n   });\n}\n```\n\nThe reason why the top example would be `elements.length` is because `i` is referenced directly so on the next iteration `i` is incremented. When we wrap the code in an IIFE we reference `i` under the parameter `count` thus removing the direct reference.\n\n`const` allows the declaration of variables that cannot be re referenced. This is useful for declaring constants (the keyword originates from it).\n\n```javascript\nconst API_KEY = \'2rh8ruberigub38rt4tu4t4\';\nconst PI = 3.14;\n```\n\nHowever objects and arrays can still be accessed and changed. To stop this use `Object.freeze()`:\n\n```javascript\nconst API_CONFIG = Object.freeze({\n  \'key\': \'8ry4iuggi4g38430t5485jmub\',\n  \'endpoint\': \'/some/boring/api/path/\'\n});\nAPI_CONFIG.key = null; // attempt to change\nAPI_CONFIG.key; //= \'8ry4iuggi4g38430t5485jmub\'\n\nconst EVENS = Object.freeze([ 2, 4, 6, 8]);\nEVENS[2] = 9;\nEVENS[2]; //= 6\n```\n\n## 11. Avoid using \u201cor\u201d when referencing variables\n\nThe only reason to avoid doing this is when the variable is allowed to be `false` . Take a look at the example below:\n\n```javascript\nlet msg = \'\'; //= should hide the button\nlet btnMsg = msg || \'Click Me\';\n\nbtnMsg; //= \'Click Me\'\n```\n\nThe reason this happens is due to the conversion of the `"\u201d` into a Boolean which returns false . As the `"\u201d` is counted as `false` the `or` comparison returns the other side `\'Click Me\'`.\n\nIf you want to have shorthand if statements you can use the ternary operator:\n\n```javascript\nvar msg = \'\'; //= should hide the button\nvar btnMsg = msg.length < 5 ? msg : \'Click Me\';\n\nbtnMsg; //= \'\'\n```'},RNiq:function(e,n,t){"use strict";t.r(n);var o=t("hHgk"),a=t.n(o),s=t("wuQJ"),i=t.n(s),r=t("UthY"),c=t.n(r),l=t("tvLF"),h=t.n(l),p=t("s4hn"),d=t.n(p),u=t("1qCV"),m=t.n(u),g=t("UrUy"),f=t.n(g),w=t("azxR"),v=t("mXGw"),b=t.n(v),y=t("hmKD"),x=t.n(y),k=t("5Yp1"),j=t("YIwv"),I=t.n(j),T=t("5dyF"),N=t.n(T),S=t("LO0j"),C=t.n(S),_=b.a.createElement,E=function(e){return _(b.a.Fragment,null,_("ul",{className:"jsx-1093723212 list"},e.allBlogs.sort((function(e,n){return new Date(n.document.data.date)-new Date(e.document.data.date)})).map((function(e){return _(N.a,{key:e.slug,href:{pathname:"/blog/".concat(e.slug)}},_("a",{className:"jsx-1093723212"},_("li",{className:"jsx-1093723212"},_("div",{className:"jsx-1093723212 hero_image"},_("img",{src:e.document.data.hero_image,alt:e.document.data.hero_image,className:"jsx-1093723212"})),_("div",{className:"jsx-1093723212 blog__info"},_("h2",{className:"jsx-1093723212"},e.document.data.title),_("h3",{className:"jsx-1093723212"}," ",(t=e.document.data.date,new Date(t).toDateString().slice(4))),_("p",{className:"jsx-1093723212"},_(C.a,{source:(n=e.document.content,n.slice(0,200).trimEnd())}))))));var n,t}))),_(I.a,{id:"1093723212"},[".jsx-1093723212{margin-bottom:0;}","a.jsx-1093723212:hover{opacity:1;}","a.jsx-1093723212:hover li.jsx-1093723212 div.hero_image.jsx-1093723212 img.jsx-1093723212{opacity:0.8;-webkit-transition:opacity 0.3s ease;transition:opacity 0.3s ease;}","a.jsx-1093723212:hover li.jsx-1093723212 .blog__info.jsx-1093723212 h2.jsx-1093723212,a.jsx-1093723212:hover li.jsx-1093723212 .blog__info.jsx-1093723212 h3.jsx-1093723212,a.jsx-1093723212:hover li.jsx-1093723212 .blog__info.jsx-1093723212 p.jsx-1093723212{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);transform:translateX(10px);-webkit-transition:-webkit-transform 0.5s ease-out;-webkit-transition:transform 0.5s ease-out;transition:transform 0.5s ease-out;}",".hero_image.jsx-1093723212{width:100%;height:33vh;overflow:hidden;background-color:#000;}",".hero_image.jsx-1093723212 img.jsx-1093723212{object-fit:cover;object-position:50% 50%;opacity:1;-webkit-transition:opacity 0.3s ease;transition:opacity 0.3s ease;min-height:100%;}",".blog__info.jsx-1093723212{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;padding:1.5rem 1.25rem;-webkit-transform:translateX(0px);-ms-transform:translateX(0px);transform:translateX(0px);-webkit-transition:-webkit-transform 0.3s ease-in;-webkit-transition:transform 0.3s ease-in;transition:transform 0.3s ease-in;border-bottom:1px solid #ebebeb;}",".blog__info.jsx-1093723212 h2.jsx-1093723212,.blog__info.jsx-1093723212 h3.jsx-1093723212,.blog__info.jsx-1093723212 p.jsx-1093723212{-webkit-transform:translateX(0px);-ms-transform:translateX(0px);transform:translateX(0px);-webkit-transition:-webkit-transform 0.5s ease-out;-webkit-transition:transform 0.5s ease-out;transition:transform 0.5s ease-out;}","li.jsx-1093723212{opacity:inherit;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;min-height:38vh;margin-bottom:0;}","h2.jsx-1093723212{margin-bottom:0.5rem;}","h3.jsx-1093723212{margin-bottom:1rem;}","p.jsx-1093723212{max-width:900px;}","@media (min-width:768px){li.jsx-1093723212{min-height:250px;height:33.333vh;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}.hero_image.jsx-1093723212{height:100%;}.hero_image.jsx-1093723212 img.jsx-1093723212{min-width:100%;height:100%;width:auto;min-height:0;}.blog__info.jsx-1093723212{min-width:70%;}}","@media (min-width:1280px){.blog__info.jsx-1093723212{padding:3rem;}h3.jsx-1093723212{margin-bottom:1.2rem;}}"]))},$=b.a.createElement;function A(e,n){var t=m()(e);if(d.a){var o=d()(e);n&&(o=o.filter((function(n){return h()(e,n).enumerable}))),t.push.apply(t,o)}return t}function W(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?A(Object(t),!0).forEach((function(n){Object(w.a)(e,n,t[n])})):c.a?i()(e,c()(t)):A(Object(t)).forEach((function(n){a()(e,n,h()(t,n))}))}return e}var B=function(e){return $(k.a,{pathname:"/",siteTitle:e.title,siteDescription:e.description},$("section",null,$(E,{allBlogs:e.allBlogs})))};n.default=B;B.getInitialProps=function(){var e,n;return f.a.async((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,f.a.awrap(t.e(2).then(t.t.bind(null,"AnCH",3)));case 2:return e=o.sent,n=function(e){var n=e.keys(),t=n.map(e);return n.map((function(e,n){var o=e.replace(/^.*[\\\/]/,"").split(".").slice(0,-1).join("."),a=t[n];return{document:x()(a.default),slug:o}}))}(t("3o6q")),o.abrupt("return",W({allBlogs:n},e));case 5:case"end":return o.stop()}}))}},TqC3:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return t("RNiq")}])},sEdr:function(e,n,t){"use strict";t.r(n),n.default="---\nauthor: Kameron Tanseli\ndate: '2019-12-24T15:55:26.370Z'\nhero_image: ../static/posts/outy-cover.png\ntitle: '1 Day Projects: Outy'\n---\n\n[Outy](https://outy-app.herokuapp.com/) is an app I developed to help solve the problem of choosing places to meetup with friends.\n\nIt uses the [Foursquare API](https://foursquare.com/) to fetch venues based on the geocode the user inputs in the search box. I designed the search functionality to be Google-esque in a way. So you can filter down by location by typing: `[category] in [place]` (e.g: Bakeries in Watford).\n\nThe app is powered using my favourite stack:\n\n* [Node / Express](https://expressjs.com/)\n* [Mongoose](https://mongoosejs.com/)\n* [EJS](https://ejs.co)\n* [Cutestrap](https://www.cutestrap.com/)\n* [Heroku](https://heroku.com/)\n\nIt may seem super boring but it's actually super productive to not have to setup React, Webpack etc to get an app out the door. Especially since this app is just searching for locations.\n\nHere's a full list of features:\n\n* Location / Category search: Bakeries, Cafes, Muesuems, Bars, Gyms etc\n* Create Polls to help decide where to go out\n* Select and save venues for later\n\n![Adding venues with Outy](../static/posts/outy-poll.png)"},taVa:function(e,n,t){"use strict";t.r(n),n.default='---\nauthor: Kameron Tanseli\ndate: \'2019-12-24T13:56:26.370Z\'\nhero_image: ../static/js-cover.png\ntitle: \'The rules of reusable components\'\n---\n\nI spend a lot of my time developing new reusable UI components.\n\nThis means during development I tend to extract UI components that are placed in a shared library or styleguide.\nThese components are reused throughout the entire project. Often having different styles or layouts when integrated into features.\n\nAlong the way I learnt a few rules that helped me save time and pain.\n\n## 1. Keep the layout fluid\n\nI can\u2019t count the amount of times a component has had a fixed width and that has affected a responsive design. Meaning I have to go in and fiddle with the existing props that was set up in place for another feature somewhere in the site. Not good.\n\nBy keeping the component 100% width you pass the layout responsibility up to the parent component.\n\nFor example it\u2019s a lot easier to use `CardOne` over `CardTwo`. As `CardOne` will respond to the parent\'s column changes when the screen size changes.\n\n```javascript\nconst CardOne = ({ title }) => (\n  <div style={{ \n    padding: "20px 30px", \n    background: "white" \n  }}>{title}</div>\n);\n\nconst CardTwo = ({ title }) => (\n  <div style={{ \n    width: 600, \n    padding: "10px",\n    background: "white" \n  }}>\n    {title}\n  </div>\n);\n\nconst App = () => (\n  <div className="row">\n    <div className="col-md-6">\n      <CardOne title="I\'m Fluid" />\n    </div>\n    <div className="col-md-6">\n      <CardTwo title="I will break this layout" />\n    </div>\n  </div>\n);\n```\n\n## 2. Allow extra props to be passed\n\nTurns out that your Button component needs a specific data attribute to work with the library you\u2019re using for one of the specific features. Too bad that the `Button` component only allows `className`, `children` and `onClick`.\n\nHow can we fix this?\n\n[Modern ES6 JavaScript allows you to spread function parameters and objects.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) This can be used to feed props to components.\n\n```javascript\n// Before -> <button className="button">Click me</button>\n\nconst Button = ({ children, className, onClick }) => (\n  <button \n    onClick={onClick} \n    className={`${styles.button} ${className || ""}`}>\n    {children}\n  </button>\n);\n\n// After -> <button className="button" data-theme="dark">Click me</button>\n\nconst Button = ({ className, ...props }) => (\n  <button \n    className={`${styles.button} ${className || ""}`} \n    {...props} />\n);\n\n// Example\n\nconst App = ({ onActivate }) => (\n  <SpecificFeature>\n    <Button data-theme="dark" onClick={onActivate}>\n      Click me\n    </Button>\n  </SpecificFeature>\n);\n```\n\n## 3. Push logic upwards / Keep it dumb\n\nOne of the top things that prevents reusability is when stateful logic specific to a feature is implemented within a reusable component.\n\nImagine you have a `Dropdown` component. That you have used in your navigation when a link is clicked.\n\n```javascript\nconst DropdownItem = ({ className, ...props }) => (\n  <li className={`dropdown-item ${className || ""}`} {...props} />\n);\n\nclass Dropdown extends React.Component {\n  state = { toggled: false };\n  toggle = () => this.setState(state => ({ toggled: !state.toggled }));\n  render() {\n    return (\n      <div className="navbar-link">\n        <span onClick={this.toggle}> {this.props.title} </span>\n        {this.state.toggled && (\n          <ul className="dropdown"> {this.props.children} </ul>\n        )}\n      </div>\n    );\n  }\n}\n\nconst Navbar = () => (\n  <div className="navbar">\n    <div className="navbar-brand">Example</div>\n    <ul className="navbar-menu">\n      <Dropdown title="My Account">\n        <DropdownItem>One</DropdownItem>\n        <DropdownItem>Two</DropdownItem>\n      </Dropdown>\n    </ul>\n  </div>\n);\n```\n\nThe problem above is:\n\n1. `Dropdown` handles the logic for opening and closing the dropdown. Making it a lot harder to reuse `Dropdown` for more complicated scenarios (e.g: only open the dropdown when a request is successful).\n\n2. `Dropdown` has markup that relates to the `Navbar` component.\n\nIf we refactor the `Dropdown` component to push the logic up. We end up with a much more reusable `Dropdown` component.\n\n```javascript\nconst DropdownItem = ({ className, ...props }) => (\n  <li className={`dropdown-item ${className || ""}`} {...props} />\n);\n\nconst Dropdown = ({ className, ...props }) => (\n  <ul className={`dropdown ${className || ""}`} {...props} />\n);\n\nclass Navbar extends React.Component {\n  state = { showUserOptions: false };\n  \n  toggleOptions = () => {\n    this.setState(state => ({\n      showUserOptions: !state.showUserOptions\n    }));\n  }\n\n  render() {\n    return (\n      <div className="navbar">\n        <div className="navbar-brand">Example</div>\n        <ul className="navbar-menu">\n          <div className="navbar-link">\n            <span onClick={this.toggleOptions}>My Account</span>\n            {this.state.showUserOptions && (\n              <Dropdown>\n                <DropdownItem>One</DropdownItem>\n                <DropdownItem>Two</DropdownItem>\n              </Dropdown>\n            )}\n          </div>\n        </ul>\n      </div>\n    );\n  }\n}\n```\n\n## Summary\n* Keep the component layout fluid.\n* Allows extra props to be passed into the component.\n* Keep logic out of them as much as possible.'},u4nI:function(e,n,t){"use strict";t.r(n),n.default='---\nauthor: Kameron Tanseli\ndate: \'2019-12-24T13:56:26.370Z\'\nhero_image: ../static/js-cover.png\ntitle: \'Writing reusable JavaScript (Revised)\'\n---\n\n> Don\u2019t reinvent the wheel, just realign it. \u2014 Anthony J. D\u2019Angelo\n\nNote from the author:\n\n_I wrote this article back in 2016 and a lot has changed since. Because of this shift I have decided to remove certain sections that are no longer considered best practises or are based on ES5 APIs. Enjoy :)_\n\n\n## It is the small things that count\n\nSmall problems are usually overlooked by the developer, I myself have rushed and wrote sloppy functions as I had lack of care for the smaller problem.\n\nAn example of rushing:\n\n```javascript\n$("button").click(() => {\n  const heading = $("h1").text();\n  const capital = heading[0].toUpperCase() + heading.slice(1);\n  $("h1").text(capital);\n});\n```\n\nHow can we improve this? Right away we can pull out the entire function so it is no longer an anonymous function which allows us to reuse this block of code:\n\n```javascript\nconst capitalizeHeading = () => {\n  const heading = $("h1").text();\n  const capital = heading[0].toUpperCase() + heading.slice(1);\n  $("h1").text(capital);\n};\n\n$("button").click(capitalizeHeading);\n```\n\nLets make this even more useful and extract the capitalizing logic:\n\n```javascript\nconst capitalize = (word = "") => word[0].toUpperCase() + word.slice(1);\n\nconst capitalizeHeading = () => {\n  const heading = $("h1").text();\n  $("h1").text(capitalize(heading));\n};\n\n$("button").click(capitalizeHeading);\n```\n\nNow we can reuse the capitalizing logic across our program.\n\nDid you know that [jQuery constructs a new Object and queries the DOM every time you call `$(<selector>)`?](https://github.com/jquery/jquery/blob/master/src/core.js#L34). We should cache jQuery objects in order to speed up execution times:\n\n```javascript\nconst capitalize = (word = "") => word[0].toUpperCase() + word.slice(1);\n\nconst capitalizeHeading = () => {\n  const $h1 = $("h1"); // cache h1 in a variable\n  $h1.text(capitalize($h1.text())); // reuse without creating\n};\n\n$("button").click(capitalizeHeading);\n```\n\n`capitalizeHeading()` is okay for this one use case but it would be much more useful if it accepted a parameter to indicate what elements to capitalize:\n\n```javascript\nconst capitalize = (word = "") => word[0].toUpperCase() + word.slice(1);\n\nconst capitalizeElement = element => () =>\n  element.text(capitalize(element.text()));\n\n$("button").click(capitalizeElement($("h1")));\n```\n\nWe can also wrap the execution in another function in order to create a partial. This is a function which has its arguments preloaded before execution, in this case we have made the element parameter a `$(\u201ch1\u201d)`.\n\nTurning `capitalizeHeading` into `capitalizeElement(<element>)` allows us to reuse that function for any element we wish to capitalize:\n\n```javascript\ncapitalizeElement($("h2"));\ncapitalizeElement($("div[data-title]"));\n```\n'},vY4i:function(e,n,t){"use strict";t.r(n),n.default="---\nauthor: Kameron Tanseli\ndate: '2019-12-24T15:55:26.370Z'\nhero_image: ../static/posts/landing-pages-cover.png\ntitle: 'Rating Landing Pages: Twizzle'\n---\n\n[Twizzle](https://twizzle.app) is a Twitter client that focuses on messaging and tweeting only. How do I know this? Because they're entire selling point is explained in one sentence. Amazingly done.\n\nThe sentence also acts as an interactive example of how the app works. Hovering over the \"messaging\" box prompts the image on the left to rise to gain the user's attention. \n\nThe real kicker is when you hover over the \"tweeting\" box the Menu Bar example drops down with an interactive tweet box that also works!\n\n![A Real Tweeting Box!!!](../static/posts/landing-pages-cover-2.png)\n\n## Score: 9/10 - Simple Idea, Amazing Execution."},w0P0:function(e,n,t){"use strict";t.r(n),n.default="---\nauthor: Kameron Tanseli\ndate: '2019-12-24T13:56:26.370Z'\nhero_image: ../static/js-cover.png\ntitle: 'Utilise render props to separate logic from presentation in React'\n---\n\nSeparating logic from your presentation has always been a best practise. It enforces the [single responsibility principle (SRP)](https://en.wikipedia.org/wiki/Single_responsibility_principle) and makes the code easier to test.\n\nReact however gets in trouble for letting developers mush the two concerns together with ease. Lets take an example from the [homepage](https://reactjs.org/) to explain:\n\n```javascript\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n  tick() {\n    this.setState(prevState => ({ seconds: prevState.seconds + 1 }));\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return <div>Seconds: {this.state.seconds}</div>;\n  }\n}\n```\n\nAbove you can see the rather simple Timer class. You can also see the display logic for the class is coded right into the `render()` method.\n\nThe problem with having `<div>Seconds: {this.state.seconds}</div>` in the `Timer` class is that it\u2019s not separating logic from presentation.\n\nLets separate the two concerns:\n\n```javascript\nconst SecondsActive = ({ seconds }) => <div>Seconds: {seconds}</div>;\n\nclass TimerContainer extends React.Component {\n  state = { seconds: 0 };\n  tick() {\n    this.setState(({ seconds }) => ({ seconds: seconds + 1 }));\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return this.props.view({ seconds: this.state.seconds });\n  }\n}\n\nReactDOM.render(\n  <TimerContainer view={SecondsActive} />,\n  document.getElementById(\"app\")\n);\n```\n\nWith a simple switch to rendering via a prop we have made the `Timer` class reusable across many presentational components and have made the presentational component super easy to test!"}},[["TqC3",1,0]]]);